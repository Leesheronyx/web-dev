if(a === '' || a === null || !isNaN(a))
if (a !== null && b !== null && a !== '' && b !== '' && a.length < 50)
nan- не число
`` - бэктики или интерполяция
null - то чего вообще не существует
undefined - что-то существует, но у него нету никого значения.
Infynity - это числовой тип данных, который обозначает бесконечность.
Вся информация от пользователя приходит в виде строк

let answers = 10;
console.log(typeof(answers)) - Проверяет на тип данных, то есть число это или строка и т.д.

Интерполяция ``
const category = 'toys'
console.log('https://someurl.com' + toys); выдаст как https://someurl.com/toys Это старый метод.
console.log(`https://someurl.com/${category}` или `https://someurl.com/${category}/5`); Новый метод интерполяции
Ещё один пример
const user = "Ivan";
alert(`Привет, ${user}`); - увидем Привет, Иван

Операторы в JS
+5 - унарный оператор плюсик, превращает например из строки в числовой тип данных
incr++ - инкримент увеличивает на один тип данных (поствиксная)
decr-- - декремент уменьшает на один тип данных (поствиксная)
++incr - форма значение (префексная)
--decr - форма значение (префексная)
== ===
console.log(2*4 == '8'); - будет TRUE  сравниваем по значению. Число и похожее число в строке ровна
console.log(2*4 === '8'); - будет false cравнивает по типу данных. Число не равно строке
console.log(2*4 === 8); - будет true cравнивает по типу данных. Число равно числу
&& - оператор И - работает только тогда, когда у нас два или больше подопотных являются правдивыми выражениями. Т.е. и это правда и это правда. 
|| - оператор или - если будет один true, а другой false. мы получим true. Потому что хотя бы 1 из аргументов у нас будет правдивым.
! - оператор отрицания обращает значение в обратное. Т.е. если у нас была правда(TRUE), то он обратит в ложь(FALSE) или наоборот.
Условия
const num = 50;
if (num < 49) {
    console.log('error')
} else if (num > 100) {
    console.log('Много');
} else {
    console.log('Ok!');
}

Тернарный оператор
const num = 50;
(num === 50) ? console.log('Ok!') : console.log('Error'); если num равен 50ти, "?" - то это условине будет выполняться(OK!),":" -если не верно выполняем это onsole.log('Error'); 

Switch 
const num = 50;
switch (num) {
    case 49:
        console.log('Неверно');
        break; - останавливает
    case 100;   
        console.log('Неверно');
        break; 
    case 50: 
        console.log('Верно');
        break;
    default:  -действие по уполмочанию
        console.log('Не в этот раз');
        break;
}

ЦИКЛЫ
let num = 50;
while (num < 55) { - до 54 будет NUM    Пока что-то у нас происходит или что-то не происходит, мы будем выполнять какие-то действия
    console.log(num);
    num++;
}
DO WHILE - сперва сделать, а потом проверить наше условие и если необходимо, выйти из цикла
let num = 50;
do { - сделай пожалуйста что-то
    console.log(num);
    num++;
}
while (num < 55);

FOR - популярный цикл, его можно подробно настроить
let num = 50;
for (let i = 1; i < 10; i++) { - i (с него начнется переменная i), 2ой частью мы пишем условие, при котором наш цикл остановит работу, 3ье плюсует;
    console.log(num);
    num ++;
} 
for (let i = 0; i < 10; i++) {
    if (i === 6) {
        break;     - здесь мы останавливаем цикл, когда доходит до 6ти, т.е. 7.8.9.10 не будет идти дальше, условие остановится
        continue; - оператор continium, позволяет нам пропустить тот шаг, который нам не нужен, но при этом не прерывает цикл.
                     т.е. от 0-10, но 6 показано не будет
    }
    console.log(i);
}

Методы и свой-во строк и чисел
https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String

isNaN(asd); - проверяет чтобы было только число, а не строка.
!isNaN(asd); - проверяет чтобы была только строка, а не число.

const str = "test";
console.log(str.length); - выводит кол-во символов внутри строки
console.log(str.toUpperCase();); - превращает текст в БОЛЬШОЙ
console.log(str.toLowerCase();); - превращает текст в уменьшает

Метод позволяет найти кусочек вашей строки и сказать с какого индекса(позиции) начинается
Метод называется официально Поиск ПодСтроки.
const fruit = "Some fruit";
console.log(fruit.indexOf("fruit"));
console.log(fruit.indexOf("t"));

const logg = "Hello world";
console.log(logg.slice(6, 11)); - отрезать слово world. 6-буква w, 11 буква D,где заканчивать
console.log(logg.slice(6)); - а можно так отрезать world

console.log(logg.substring(6, 11)); - тоже самое, что и slice();

console.log(logg.substr(6, 5)); главное отличие,вместо 2го аргумента с конца, указываем длинну. Т.е. сколько символов нам необходимо вырезать. Получим world

Числа
const num = 12.2;
console.log(Math.round(num)) - округляет число только, к округлённому ближайшему целому числу. Будет 12.

const test = "12.2px";
console.log(parseInt(test)); - переводит число в другую систему исчесления. Получим ровно 12 и будет числовой тип данных.
console.log(parseFloat(test)); - метод служит изночально для того, чтобы взять какое-то число, либо строку и вернуть нам в десятичном варианте как раз это значение. Получим 12.2, преобразует в число.


CallBack_Function;
function test (lang, hi) {
    (console.log(`я учу ${lang}`));
    hi();
}
test('javascript', function() {
    console.log('privet mir');
});

function test (lang, hi) {
    (console.log(`я учу ${lang}`));
    hi();
}

function a() {
    console.log('privet dodik');
}

test('javascript', a);


Объекты, диструктуризация объектов

const options = {
    name: 'test',
    width: 1024,
    height: 1024,
    colors: {
        border: 'black'
        bg: 'red'
    }
};
console.log(options.name); - будет показано test

delete options.name; - удалить свойство объекта

перебрать все свой-ва объекта.
for in
for (let key in options) { - key будет показано name,width,height и т.д.
    console.log(`Свойство ${key} имеет значение ${options[key]}`); -${options[key] значение ключа test,1024,1024
}

перебрать все свой-ва объекта, если есть внутри объекта, объект.
for (let key in options) { 
    if(typeof(options[key]) === 'object') {
        for (let i in options[key]) { 
        console.log(`Свойство ${i} имеет значение ${options[key][i]}`);
        }  else {
            console.log(`Свойство ${key} имеет значение ${options[key]}`);
        }
}

перебрать объекты с помощью методов

console.log(Object.keys(options)); - этот метод берёт наш объект и на его основании создаёт массив в котором все элементы это ключи находящиеся вот на первой части пары,ключ, значения у объектов. Превратит в массив и будет ['name', 'width', 'height, 'colors'];

console.log(Object.keys(options).lenght); - получим кол-во элементов в options. в консоле 4 будет.

Создать метод в объекте можно
const options = {
    name: 'test',
    width: 1024,
    height: 1024,
    colors: {
        border: 'black'
        bg: 'red'
    },
    makeTest: function() {
        console.log("test");
    }
};
options.makeTest(); - увидим в консоле Test.

Как достучатся до вложенных свойств в объекте? - это Деструктуризация
const{border, bg} = options.colors; Мы вытащили кусочки(свойств)в котором находятся во вложенном объекте в качестве отдельной переменной.
console.log(border);



Массивы и псевдоклассы.

const arr = [1, 2, 3, 4, 5];

arr.pop(); - Удаляет последний элемент с массива (5)
arr.push(10); - добавляет в конец массива элемент;

Перебор массива c помощью Цикла
for(let i = 0; i < arr.length; i++) {
    console.log(arr[i])
}

Конструкция перебора for of
for(let value of arr) {
    console.log(value);
}

Метод массива 
arr.forEach(function(item, i, arr) {        - позволяет гибко нам перебрать опять же все элементы, которые находятся внутри массива
    console(`${i}: ${item} внутри массива ${arr}`)
}); 

Метод split, join и sort. 
Split - превращает строку в массив
Join - превращает массив в строку
Sort - сортировка массива
Представим задачу. От пользователя или от сервера мы с вами получили большую строку(строковый тип данных), где через какой-нибудь знак например через запятую, написаны товары. Мы бы хотели взять и превратить их в обычный массив, где у нас эти товары будут лежать по порядку. И сделать это можно с помощью Split.
const str = prompt("", "");
const products = str.split(", "); - нужно точно указать через какой разделитель будут товары в строке. Это может запятая или точка с запятой ну и т.д.
console.log(products); - мы получим массив Array, которые сформировались с помощью метода SPLIT.

Теперь на основании массива сделать её строкой метод JOIN. Например взять список имён которые нас интересуют и вывести на экран. В качестве не массива, а строчки, чтобы он увидел список приглашённых гостей.
const str = prompt("", "");
const products = str.split(", "); - мы получили массив из элементов
console.log(products.join('; ')); - массив обратно склеился в строку, только уже разделив через ;
console.log(products.join('; ')); - указать через какой разделитель будут гости. Получим строку в консоле через ; www; sadsad; asd

Метод SORT - сортирует элементы которые находятся внутри массива, как строки. Метод сорт может принимать калбек функцию. 
const arr [2, 13, 26, 8, 10];
arr.sort(compareNum);
console.log(arr);

function compareNum(a, b) { - Делаем калбек функцию для sort. Чтобы числа по порядку сортировались.
    return a - b;
}

const str = prompt("", "");
const products = str.split(", ");
products.sort();
console.log(products.join('; '));

Псевомассивы. Когда мы работаем со страницей, мы будем получать пседомассивы.

Передача по ссылке или по значению, Spread оператор (ES6-ES9)
const obj = {
    a: 5,
    b: 1
}

const copy = obj; - это не новый объект, это значение по ссылке. Передача по ссылки
copy.a = 10;
console.log(copy);

function copy(mainObj) {  функция создания копии объекта
    let objCopy = {};

    let key;
    for(key in mainObj) {
        objCopy[key] = mainObj[key];
    }

    return objCopy;
}

const number = {
    a: 2,
    b: 5,
    c: {
        x: 7,
        y: 4
    }
};
const newNumbers = copy(newNumbers);
newNumbers.a = 10;
console.log(newNumbers);

Object.assign(); Метод, который позволяет соединить сразу несколько объектов 
const add = {
    d: 5,
    e: 20
    
};
console.log(Object.assign(newNumbers, add)) - первым аргуметом мы передаём тот объект в который мы хотим всё поместить, а второй аргумент тот объект в который мы помещаем